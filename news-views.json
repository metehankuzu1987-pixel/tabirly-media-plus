<!doctype html>
<html lang="tr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Tabirly — Haber Duvarı (Pinterest tarzı)</title>
  <meta name="description" content="Tabirly haberleri için Pinterest benzeri, akışkan Masonry duvarı. Farklı boyutlar, etiket filtreleme, hızlı arama.">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@600;700&family=Inter:wght@400;500;600;800&display=swap" rel="stylesheet">
  <style>
    :root{
      /* === TABIRLY BRAND KIT (Mor lider) === */
      --bg:#F9F9FB;          /* Light BG */
      --card:#FFFFFF;        /* Kart zemini */
      --ink:#261624;         /* Metin (ink) */
      --muted:#6B7280;       /* İkincil metin */
      --brand:#8F5BFE;       /* Primary mor */
      --accent:#E98C00;      /* Safran (CTA) */
      --secondary:#F2E8F0;   /* Açık pembe/arka plan varyantı */
      --radius:16px;
      --shadow:0 10px 24px rgba(17, 24, 39, .08);
      --font:Inter, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans';
      --font-head:'Space Grotesk', ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans';
    }
    @media (prefers-color-scheme: dark){ :root{ --bg:#0b0c10; --card:#111217; --ink:#e6e7eb; --muted:#aeb2bd; } } }

    *{ box-sizing:border-box }
    html,body{ height:100% }
    body{ margin:0; font-family:var(--font); background:var(--bg); color:var(--ink); }
    .wrap{ max-width:1200px; margin:0 auto; padding:24px; }
    header{ display:flex; gap:16px; align-items:center; flex-wrap:wrap; margin-bottom:18px; }
    h1{ font-family:var(--font-head); font-size:clamp(24px,3.5vw,40px); margin:0; font-weight:700; letter-spacing:-.01em; }
    .sub{ color:var(--muted); font-size:14px }
    .controls{ display:flex; gap:10px; margin-left:auto; flex-wrap:wrap }
    .inp, .sel{ background:var(--card); color:var(--ink); border:1px solid rgba(127,127,127,.18); border-radius:12px; padding:10px 12px; box-shadow:var(--shadow, none); outline:none; min-width:190px }
    .btn{ background:var(--brand); color:#fff; border:0; border-radius:12px; padding:10px 14px; font-weight:700; cursor:pointer; transition:.15s transform ease, .15s opacity ease }
    .btn:hover{ transform:translateY(-1px); opacity:.95 }
    .btn:focus{ outline:2px solid var(--accent); outline-offset:2px }

    /* STATUS */
    .status{ display:none; margin-bottom:12px; padding:10px 12px; border-radius:12px; font-size:13px }
    .status.show{ display:block }
    .status.ok{ background:rgba(143,91,254,.12); color:var(--brand); }
    .status.warn{ background:rgba(233,140,0,.14); color:var(--accent); }
    .status.err{ background:rgba(255,80,80,.12); color:#d24a4a; }

    /* Masonry: CSS columns approach for widest support */
    .masonry{ column-gap:16px; }
    @media (min-width:1024px){ .masonry{ column-count:4 } }
    @media (min-width:768px) and (max-width:1023.98px){ .masonry{ column-count:3 } }
    @media (max-width:767.98px){ .masonry{ column-count:1 } }

    .card{ break-inside: avoid; background:var(--card); border-radius:var(--radius); box-shadow:var(--shadow); margin:0 0 16px; overflow:hidden; display:block; text-decoration:none; color:inherit; position:relative }
    .thumb{ width:100%; height:auto; display:block; aspect-ratio:4/3; object-fit:cover }
    .size-sm .thumb{ aspect-ratio:4/3 }
    .size-md .thumb{ aspect-ratio:1/1 }
    .size-lg .thumb{ aspect-ratio:3/4 }
    .size-xl .thumb{ aspect-ratio:9/16 }

    .meta{ padding:12px 14px 14px }
    .ttl{ font-weight:800; font-size:16px; line-height:1.25; margin:0 0 8px }
    .row{ display:flex; align-items:center; justify-content:space-between; gap:8px }
    .date{ font-size:12px; color:var(--muted) }
    .tags{ display:flex; gap:6px; flex-wrap:wrap }
    .tag{ font-size:11px; background:var(--secondary); color:var(--brand); padding:4px 8px; border-radius:999px }

    .hoverfx{ position:absolute; inset:0; background:linear-gradient(180deg, rgba(0,0,0,.0), rgba(0,0,0,.55)); opacity:0; transition:.25s }
    .card:hover .hoverfx{ opacity:1 }
    .hoverfx .h-ttl{ position:absolute; left:12px; right:12px; bottom:10px; font-weight:800; font-size:18px; color:#fff }

    .empty{ display:none; text-align:center; padding:48px; color:var(--muted) }
    .foot{ text-align:center; color:var(--muted); font-size:12px; margin:22px 0 8px }

    /* === BADGE + ANIMATIONS (en çok/en az okunan) === */
    .badge{ position:absolute; top:8px; right:8px; background:rgba(0,0,0,.55); color:#fff; font-size:14px; padding:6px 8px; border-radius:999px; backdrop-filter:blur(4px); display:flex; align-items:center; gap:6px }
    .badge .txt{ font-weight:800; font-size:12px; letter-spacing:.2px }
    .anim-pulse{ animation:pulse 1.6s ease-in-out infinite }
    .anim-wobble{ animation:wobble 2.2s ease-in-out infinite }
    @keyframes pulse{ 0%{transform:scale(1)} 50%{transform:scale(1.04)} 100%{transform:scale(1)} }
    @keyframes wobble{ 0%,100%{transform:rotate(0)} 25%{transform:rotate(-1.2deg)} 75%{transform:rotate(1.2deg)} }
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <div>
        <h1>Haber Duvarı — Pinterest tarzı</h1>
        <div class="sub">Farklı boyutlarda kartlar; arama, etiket filtresi, sıralama, sonsuz akış. Yeni haber ekleyince otomatik yerleşir.</div>
      </div>
      <div class="controls">
        <input id="q" class="inp" type="search" placeholder="Başlıkta ara… (örn: migren, astro)">
        <select id="tagSel" class="sel" aria-label="Etiket seç">
          <option value="">Tüm etiketler</option>
        </select>
        <select id="sortSel" class="sel" title="Sırala" aria-label="Sırala">
          <option value="new">Yeni → Eski</option>
          <option value="old">Eski → Yeni</option>
          <option value="az">A → Z</option>
          <option value="za">Z → A</option>
        </select>
        <button id="shuffle" class="btn" title="Rastgele karıştır">Karıştır</button>
      </div>
    </header>

    <div id="status" class="status" role="status" aria-live="polite"></div>

    <main id="board" class="masonry" aria-live="polite"></main>
    <div id="empty" class="empty">Sonuç bulunamadı. Aramayı temizlemeyi dener misin?</div>
    <div id="sentinel" style="height:1px;"></div>

    <div class="foot">© Tabirly • Bu sayfayı Blogger'a <em>iFrame</em> ile gömebilir veya GitHub Pages'te <code>labs.domain.com</code> altında çalıştırabilirsin.</div>
  </div>

<script>
/**
 * HATA: "TypeError: Failed to fetch" çözümü
 * - CORS/erişim engeline takıldığında otomatik JSONP'a geçiyoruz.
 * - JSONP da başarısız olursa MANUAL moda düşer.
 * - Böylece canvas/sandbox gibi ortamlarda kırılmadan çalışır.
 */

const SETTINGS = {
  MODE: 'auto', // 'auto' | 'cors' | 'jsonp' | 'manual'
  FEED_URL_JSON: 'https://tr.tabirly.com/feeds/posts/default/-/haberler?alt=json&max-results=150',
  FEED_URL_JSONP_CB: '__TABIRLY_FEED__',
  PAGE_SIZE: 18,
  ENABLE_TESTS: true, // test günlüklerini görmek istemezsen false yap
  VIEWS_URL: '/assets/news-views.json' // ör: '/assets/news-views.json' (same-origin olmalı)
};

// Boyutlar: 'sm' | 'md' | 'lg' | 'xl' — manuel fallback örnek veriler
const DATA = [
  { title:'Migren için yeni çalışma: Uyku penceresi', url:'https://tr.tabirly.com/2025/09/migren-uyku-penceresi.html', image:'https://placehold.co/800x600/png', size:'lg', date:'2025-09-14', tags:['Sağlık','Migren'], views:1280 },
  { title:'Rüyada sınav görmenin kültürlerarası okuması', url:'https://tr.tabirly.com/2025/09/ruyada-sinav.html', image:'https://placehold.co/600x800/png', size:'xl', date:'2025-09-12', tags:['Rüya','Kültür'], views:540 },
  { title:'Yoga nefesi ve parasempatik aktivasyon', url:'https://tr.tabirly.com/2025/09/yoga-nefesi.html', image:'https://placehold.co/900x900/png', size:'md', date:'2025-09-10', tags:['Yoga'], views:870 },
  { title:'Bitkisel: Zencefil ve bulantı kanıt özeti', url:'https://tr.tabirly.com/2025/09/zencefil-bulanti.html', image:'https://placehold.co/1200x800/png', size:'sm', date:'2025-09-09', tags:['Bitkiler','Kanıt'], views:230 },
  { title:'Astro: Merkür retrosu iletişimi nasıl etkiler?', url:'https://tr.tabirly.com/2025/09/merkur-retro.html', image:'https://placehold.co/1000x1400/png', size:'xl', date:'2025-09-07', tags:['Astroloji'], views:1900 }
];

const board = document.getElementById('board');
const q = document.getElementById('q');
const tagSel = document.getElementById('tagSel');
const sortSel = document.getElementById('sortSel');
const empty = document.getElementById('empty');
const shuffleBtn = document.getElementById('shuffle');
const sentinel = document.getElementById('sentinel');
const statusEl = document.getElementById('status');

let CURRENT = [];      // feed veya DATA'dan gelen ham liste
let FILTERED = [];     // arama/etiket sonrası
let SORTED = [];       // sıralanmış görünüm
let page = 0;          // sonsuz akış sayfası
let MAX_KEY = null;    // en çok okunan url
let MIN_KEY = null;    // en az okunan url

function setStatus(msg, cls='ok'){
  statusEl.textContent = msg; statusEl.className = `status show ${cls}`;
}

function fmtDate(iso){ try{ const d=new Date(iso); return d.toLocaleDateString('tr-TR'); }catch(e){ return iso; } }
function uniqueTags(items){ return [...new Set(items.flatMap(x=>x.tags||[]))]; }
function byDateDesc(a,b){ return (new Date(b.date||0)) - (new Date(a.date||0)); }
function byDateAsc(a,b){ return (new Date(a.date||0)) - (new Date(b.date||0)); }
function byAZ(a,b){ return (a.title||'').localeCompare(b.title||'', 'tr'); }
function byZA(a,b){ return (b.title||'').localeCompare(a.title||'', 'tr'); }

function applyFilters(){
  const term = (q.value||'').toLowerCase();
  const t = tagSel.value;
  FILTERED = CURRENT.filter(x=>{
    const hitTerm = !term || (x.title||'').toLowerCase().includes(term) || (x.tags||[]).join(' ').toLowerCase().includes(term);
    const hitTag = !t || (x.tags||[]).includes(t);
    return hitTerm && hitTag;
  });
  applySort(true);
}

function applySort(resetPage=false){
  const mode = sortSel.value;
  let arr = [...FILTERED];
  if(mode==='new') arr.sort(byDateDesc);
  else if(mode==='old') arr.sort(byDateAsc);
  else if(mode==='az') arr.sort(byAZ);
  else if(mode==='za') arr.sort(byZA);
  SORTED = arr;
  if(resetPage){ page = 0; }
  renderPage();
}

function renderPage(){
  const slice = SORTED.slice(0, SETTINGS.PAGE_SIZE * (page+1));
  render(slice, page===0);
  if(slice.length < SORTED.length){ observer.observe(sentinel); }
  else{ observer.unobserve(sentinel); }
}

function render(items, clear=false){
  if(clear){ board.innerHTML=''; }
  if(!items.length){ empty.style.display='block'; board.innerHTML=''; return; } else{ empty.style.display='none'; }
  const frag = document.createDocumentFragment();
  items.slice(board.children.length).forEach(it=>{
    const a = document.createElement('a');
    a.className = `card size-${(it.size||'md')}`;
    a.href = it.url; a.target = '_top'; a.rel='noopener'; a.title = it.title;

    // Rozet + animasyon (en çok/az okunan)
    const isMax = (MAX_KEY && it.url===MAX_KEY);
    const isMin = (MIN_KEY && it.url===MIN_KEY);
    if(isMax) a.classList.add('anim-pulse');
    if(isMin) a.classList.add('anim-wobble');

    const img = document.createElement('img');
    img.className = 'thumb'; img.loading='lazy'; img.decoding='async'; img.src = it.image; img.alt = it.title;

    const fx = document.createElement('div'); fx.className = 'hoverfx';
    const h = document.createElement('div'); h.className = 'h-ttl'; h.textContent = it.title; fx.appendChild(h);

    const meta = document.createElement('div'); meta.className='meta';
    const ttl = document.createElement('h3'); ttl.className='ttl'; ttl.textContent = it.title; meta.appendChild(ttl);

    const row = document.createElement('div'); row.className='row';
    const date = document.createElement('div'); date.className='date'; date.textContent = fmtDate(it.date||'');
    const tags = document.createElement('div'); tags.className='tags';
    (it.tags||[]).forEach(t=>{ const b=document.createElement('span'); b.className='tag'; b.textContent=t; tags.appendChild(b); });
    row.append(date, tags); meta.appendChild(row);

    if(isMax){
      const badge = document.createElement('div');
      badge.className='badge';
      badge.innerHTML = '<span>🤩</span><span class="txt">En Çok Okunan</span>';
      a.appendChild(badge);
    }
    if(isMin){
      const badge = document.createElement('div');
      badge.className='badge';
      badge.innerHTML = '<span>😭</span><span class="txt">En Az Okunan</span>';
      a.appendChild(badge);
    }

    a.append(img, fx, meta); frag.appendChild(a);
  });
  board.appendChild(frag);
}

function injectTags(items){
  const tags = uniqueTags(items);
  tagSel.innerHTML = '<option value="">Tüm etiketler</option>' + tags.map(t=>`<option value="${t}">${t}</option>`).join('');
}

function shuffleInPlace(arr){ for(let i=arr.length-1;i>0;i--){ const j=Math.floor(Math.random()*(i+1)); [arr[i],arr[j]]=[arr[j],arr[i]] } return arr }

// Sonsuz akış için IntersectionObserver
const observer = new IntersectionObserver((entries)=>{
  for(const e of entries){ if(e.isIntersecting){ page++; renderPage(); } }
}, { rootMargin: '400px 0px' });

// ---- FEED ALTERNATİFLERİ ----
async function initManual(){
  setStatus('Çevrimdışı/Manual mod: yerel DATA kullanılıyor.', 'warn');
  CURRENT = [...DATA];
  computeExtrema(CURRENT);
  injectTags(CURRENT);
  FILTERED = [...CURRENT];
  sortSel.value = 'new';
  applySort(true);
}

async function initFeedCORS(){
  const res = await fetch(SETTINGS.FEED_URL_JSON, { cache:'no-store', mode:'cors' });
  if(!res.ok) throw new Error('Feed alınamadı');
  const json = await res.json();
  return mapBlogger(json);
}

function jsonp(url, cbName){
  return new Promise((resolve, reject)=>{
    const u = new URL(url);
    u.searchParams.set('alt','json-in-script');
    u.searchParams.set('callback', cbName);
    const s = document.createElement('script');
    let done=false; const timer=setTimeout(()=>{cleanup(); reject(new Error('JSONP timeout'));}, 10000);
    window[cbName] = (data)=>{ if(done) return; done=true; cleanup(); resolve(data); };
    s.onerror = ()=>{ if(done) return; done=true; cleanup(); reject(new Error('JSONP failed')); };
    s.src = u.toString(); document.head.appendChild(s);
    function cleanup(){ clearTimeout(timer); try{ delete window[cbName]; }catch{} if(s.parentNode) s.parentNode.removeChild(s); }
  });
}

async function initFeedJSONP(){
  const json = await jsonp(SETTINGS.FEED_URL_JSON, SETTINGS.FEED_URL_JSONP_CB);
  return mapBlogger(json);
}

function mapBlogger(json){
  const items = (json.feed?.entry||[]).map((e,i)=>{
    let thumb = e.media$thumbnail?.url || '';
    if(!thumb){
      const html = e.content?.$t || '';
      const m = html.match(/<img[^>]+src=["']([^"']+)["']/i);
      if(m) thumb = m[1];
    }
    if(!thumb) thumb = 'https://placehold.co/800x600/png';
    return {
      title: e.title?.$t || 'Başlık',
      url: (e.link||[]).find(l=>l.rel==='alternate')?.href || '#',
      image: thumb,
      size: (i%7===0?'xl': i%3===0?'lg': i%2===0?'md':'sm'),
      date: (e.published?.$t || e.updated?.$t || '').substring(0,10),
      tags: (e.category||[]).map(c=>c.term).filter(Boolean),
      views: undefined
    };
  });
  return items;
}

// (Opsiyonel) Harici görüntülenme verisini birleştir (same-origin olmalı)
async function maybeMergeViews(){
  try{
    if(!SETTINGS.VIEWS_URL) return;
    const resp = await fetch(SETTINGS.VIEWS_URL, {cache:'no-store'});
    if(!resp.ok) return;
    const arr = await resp.json();
    const map = new Map(arr.map(x=>[x.url, x.views]));
    CURRENT = CURRENT.map(x=> ({...x, views: map.get(x.url) ?? x.views}));
  }catch(e){ /* sessiz geç */ }
}

function computeExtrema(list){
  const withViews = list.filter(x=>typeof x.views === 'number' && !isNaN(x.views));
  if(withViews.length){
    const max = withViews.reduce((a,b)=> b.views>(a?.views??-Infinity)? b : a, null);
    const min = withViews.reduce((a,b)=> b.views<(a?.views?? Infinity)? b : a, null);
    MAX_KEY = max?.url || null; MIN_KEY = min?.url || null;
  }else{ MAX_KEY = null; MIN_KEY = null; }
}

// ---- BAŞLAT ----
(async function start(){
  try{
    let items;
    if(SETTINGS.MODE==='manual') throw new Error('force-manual');
    if(SETTINGS.MODE==='cors' || SETTINGS.MODE==='auto'){
      try{
        items = await initFeedCORS();
        setStatus('Çevrimiçi: CORS ile feed bağlandı. (JSON)', 'ok');
      }catch(corsErr){
        if(SETTINGS.MODE==='cors') throw corsErr; // zorunlu cors ise patlat
        // JSONP fallback
        items = await initFeedJSONP();
        setStatus('Çevrimiçi: CORS engeli aşıldı, JSONP ile bağlandı.', 'ok');
      }
    } else if(SETTINGS.MODE==='jsonp'){
      items = await initFeedJSONP();
      setStatus('Çevrimiçi: JSONP ile bağlandı.', 'ok');
    }
    CURRENT = items;
    await maybeMergeViews();
    computeExtrema(CURRENT);
    injectTags(CURRENT);
    FILTERED = [...CURRENT];
    sortSel.value = 'new';
    applySort(true);
  }catch(err){
    console.warn('Feed alınamadı, manual moda düşüldü →', err);
    await initManual();
  }
})();

q.addEventListener('input', ()=>applyFilters());
tagSel.addEventListener('change', ()=>applyFilters());
sortSel.addEventListener('change', ()=>applySort(true));
shuffleBtn.addEventListener('click', ()=>{ sortSel.value='new'; FILTERED = shuffleInPlace([...FILTERED]); SORTED=[...FILTERED]; page=0; renderPage(); });

// ---- BASİT TESTLER (konsole ve gizli log) ----
(function tests(){
  if(!SETTINGS.ENABLE_TESTS) return;
  const logs=[]; const log=(m)=>{logs.push(m); console.log('%c[Test]','color:#7ae8a3', m)};
  // T1: Extrema hesaplama
  const sample=[{url:'u1',views:1},{url:'u2',views:5},{url:'u3',views:3}];
  MAX_KEY=MIN_KEY=null; computeExtrema(sample);
  log((MAX_KEY==='u2' && MIN_KEY==='u1')? 'T1 PASS: extrema doğru' : 'T1 FAIL: extrema yanlış');
  // T2: JSONP URL dönüştürme
  const u = new URL(SETTINGS.FEED_URL_JSON);
  u.searchParams.set('alt','json-in-script'); u.searchParams.set('callback','X');
  log(u.toString().includes('alt=json-in-script') && u.toString().includes('callback=X') ? 'T2 PASS: jsonp url' : 'T2 FAIL: jsonp url');
  // T3: Render rozetleri (manuel min/max)
  const testItems=[{title:'A',url:'a',image:'https://placehold.co/600x400',size:'md',date:'2025-09-17',tags:[],views:10},{title:'B',url:'b',image:'https://placehold.co/600x400',size:'md',date:'2025-09-16',tags:[],views:1}];
  board.innerHTML=''; CURRENT=[...testItems]; computeExtrema(CURRENT); FILTERED=[...CURRENT]; SORTED=[...CURRENT]; page=0; renderPage();
  const hasMax = board.innerHTML.includes('En Çok Okunan');
  const hasMin = board.innerHTML.includes('En Az Okunan');
  log((hasMax && hasMin)? 'T3 PASS: rozetler görünüyor' : 'T3 FAIL: rozetler görünmüyor');
  // T4: views birleştirme (mock)
  (async()=>{
    const beforeMax = MAX_KEY; const mock = [{url:'a',views:999}];
    const map = new Map(mock.map(x=>[x.url,x.views]));
    CURRENT = CURRENT.map(x=> ({...x, views: map.get(x.url) ?? x.views}));
    computeExtrema(CURRENT);
    log(MAX_KEY==='a' ? 'T4 PASS: views merge etkili' : 'T4 WARN: views merge etkisiz');
    MAX_KEY = beforeMax; // geri al
  })();
  // Ekranda test loglarını gizli bir şekilde tut
  const pre=document.createElement('pre'); pre.style.cssText='display:none'; pre.id='testlog'; pre.textContent=logs.join('
'); document.body.appendChild(pre);
})();

// Yardımcı: mevcut URL’lerden bir şablon dök (konsolda kullan)
window.dumpViewsTemplate = function(){
  const arr = CURRENT.map(x=>({url:x.url, views:0}));
  console.log('views-template', JSON.stringify(arr, null, 2));
  return arr;
};
</script>
</body>
</html>
